// <auto-generated />
using System;
using AMP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AMP.Migrations
{
    [DbContext(typeof(AMPContext))]
    [Migration("20210819151959_TeamCityMigration")]
    partial class TeamCityMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AMP.Models.Build", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtifactSize")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("DurationNetTime")
                        .HasColumnType("int");

                    b.Property<string>("ExecutionTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisibleArtificatSize")
                        .HasColumnType("int");

                    b.Property<string>("WaitingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("AMP.Models.BuildStageDuration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ArtifactPublishing")
                        .HasColumnType("int");

                    b.Property<int>("BStepRunner_11")
                        .HasColumnType("int");

                    b.Property<int>("BStepRunner_12")
                        .HasColumnType("int");

                    b.Property<int>("BuildFK")
                        .HasColumnType("int");

                    b.Property<int>("BuildFinish")
                        .HasColumnType("int");

                    b.Property<int>("FirstStepPrep")
                        .HasColumnType("int");

                    b.Property<int>("SourceUpdate")
                        .HasColumnType("int");

                    b.Property<int>("ToolsUpdating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BuildStageDurations");
                });

            modelBuilder.Entity("AMP.Models.Changes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildFK")
                        .HasColumnType("int");

                    b.Property<int?>("BuildId")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildId");

                    b.HasIndex("ChangesId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("AMP.Models.CodeCoverage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BuildFK")
                        .HasColumnType("int");

                    b.Property<int>("ClassCovered")
                        .HasColumnType("int");

                    b.Property<int>("ClassNonCovered")
                        .HasColumnType("int");

                    b.Property<float>("ClassPercent")
                        .HasColumnType("real");

                    b.Property<int>("ClassTotal")
                        .HasColumnType("int");

                    b.Property<int>("MethodCovered")
                        .HasColumnType("int");

                    b.Property<int>("MethodNonCovered")
                        .HasColumnType("int");

                    b.Property<float>("MethodPercent")
                        .HasColumnType("real");

                    b.Property<int>("MethodTotal")
                        .HasColumnType("int");

                    b.Property<int>("StatementCovered")
                        .HasColumnType("int");

                    b.Property<int>("StatementNonCovered")
                        .HasColumnType("int");

                    b.Property<float>("StatementPercent")
                        .HasColumnType("real");

                    b.Property<int>("StatementTotal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CodeCoverage");
                });

            modelBuilder.Entity("AMP.Models.CodeInspections", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BuildFK")
                        .HasColumnType("int");

                    b.Property<int>("Errors")
                        .HasColumnType("int");

                    b.Property<int>("Warnings")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CodeInspections");
                });

            modelBuilder.Entity("AMP.Models.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChangesFK")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChangesId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("AMP.Models.Tests", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BuildFK")
                        .HasColumnType("int");

                    b.Property<int?>("BuildId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("AMP.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93707108-36f0-49eb-b367-898e9109f409"),
                            Email = "malek.ajmi@se.linedata.com",
                            Password = "$2a$11$oO/LhkSEuX/W60Swzrl26eWx9H8V76f.InKw4f5O81i046PXsg0jC",
                            Role = "Developer",
                            UserName = "ajmimalek"
                        },
                        new
                        {
                            Id = new Guid("ad76ad35-cbf3-4742-b0a1-f68cdf756d1a"),
                            Email = "adel.adel@se.linedata.com",
                            Password = "$2a$11$WPFK.9M9o9xbGwegeK2os.HBQNWDUE0bh.DEZcql2ihnPe5YMfEZ6",
                            Role = "Manager",
                            UserName = "adeladel"
                        });
                });

            modelBuilder.Entity("AMP.Models.BuildStageDuration", b =>
                {
                    b.HasOne("AMP.Models.Build", "Build")
                        .WithOne("BuildStage")
                        .HasForeignKey("AMP.Models.BuildStageDuration", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");
                });

            modelBuilder.Entity("AMP.Models.Changes", b =>
                {
                    b.HasOne("AMP.Models.Build", "Build")
                        .WithMany("Changes")
                        .HasForeignKey("BuildId");

                    b.HasOne("AMP.Models.Changes", null)
                        .WithMany("changes")
                        .HasForeignKey("ChangesId");

                    b.Navigation("Build");
                });

            modelBuilder.Entity("AMP.Models.CodeCoverage", b =>
                {
                    b.HasOne("AMP.Models.Build", "Build")
                        .WithOne("CodeCoverage")
                        .HasForeignKey("AMP.Models.CodeCoverage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");
                });

            modelBuilder.Entity("AMP.Models.CodeInspections", b =>
                {
                    b.HasOne("AMP.Models.Build", "Build")
                        .WithOne("CodeInspections")
                        .HasForeignKey("AMP.Models.CodeInspections", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");
                });

            modelBuilder.Entity("AMP.Models.Files", b =>
                {
                    b.HasOne("AMP.Models.Changes", "Changes")
                        .WithMany()
                        .HasForeignKey("ChangesId");

                    b.Navigation("Changes");
                });

            modelBuilder.Entity("AMP.Models.Tests", b =>
                {
                    b.HasOne("AMP.Models.Build", "Build")
                        .WithMany("Tests")
                        .HasForeignKey("BuildId");

                    b.Navigation("Build");
                });

            modelBuilder.Entity("AMP.Models.Build", b =>
                {
                    b.Navigation("BuildStage");

                    b.Navigation("Changes");

                    b.Navigation("CodeCoverage");

                    b.Navigation("CodeInspections");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("AMP.Models.Changes", b =>
                {
                    b.Navigation("changes");
                });
#pragma warning restore 612, 618
        }
    }
}
